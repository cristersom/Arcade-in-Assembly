.model small
.stack 100h

.data

    CR equ 13
    NL equ 10                       

    msg      db '      ___                        __    ' , CR, NL
             db '     /   |  ______________ _____/ /__  ' , CR, NL
             db '    / /| | / ___/ ___/ __ `/ __  / _ \ ' , CR, NL
             db '   / ___ |/ /  / /__/ /_/ / /_/ /  __/ ' , CR, NL
             db '  /_/  |_/_/   \___/\__,_/\__,_/\___/  ' 

    TAM_MSG equ $-msg 

    nomes    db 'Cristersom Simionato, Wellinton Sartori', CR, NL
             db '              [ Jogar ]', CR, NL
             db '                Sair' 

    TAM_MSG2 equ $-nomes 

    campo3     db '000'
    TAM_MSG5 equ $-campo3 

    campo4     db '60'
    TAM_MSG6 equ $-campo4 

    campo1     db 'SCORE: '
    TAM_MSG3 equ $-campo1 

    campo2     db 'TEMPO: '
    TAM_MSG4 equ $-campo2 

; ---------------------------
; Sprites 17x13 (0 = transpar?ncia)
; ---------------------------

nave_ca?ador db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
             db 12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0
             db 15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
             db 0,0,15,15,15,0,0,0,0,0,0,15,15,15,15,0,0
             db 0,0,0,0,15,15,15,0,0,0,15,15,0,0,0,15,0
             db 0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15
             db 14,0,14,0,14,15,15,15,15,15,15,15,15,15,15,15,15
             db 0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,0
             db 0,0,0,0,15,15,15,0,0,0,0,15,15,15,15,0,0
             db 0,0,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0
             db 15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
             db 12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0
             db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0



; Nave inimiga tipo A (cor 2)
nave1 db 0,0,0,0,0,0,0,14,14,14,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,14,14,14,0,0,0,0,0,0,0
      db 0,0,0,0,0,14,14,14,14,14,14,14,0,0,0,0,0
      db 0,0,0,0,0,14,14,14,14,14,14,14,0,0,0,0,0
      db 0,0,0,2,2,0,0,2,2,2,0,0,2,2,0,0,0
      db 0,0,0,2,2,0,0,2,2,2,0,0,2,2,0,0,0
      db 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
      db 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
      db 0,0,0,0,0,13,13,0,14,0,13,13,0,0,0,0,0
      db 0,0,0,0,0,13,13,0,0,0,13,13,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

; Nave inimiga tipo B (cor 3)
nave2 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,6,6,6,0,0,6,6,6,0,0,0,0
      db 0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0
      db 0,6,6,5,0,0,0,5,5,5,6,0,0,0,0,0,0
      db 6,6,5,5,0,0,0,5,5,5,5,5,0,5,6,0,0
      db 5,5,5,5,5,5,5,5,0,0,0,5,5,0,0,0,0
      db 5,5,5,5,5,5,5,5,0,0,0,5,5,5,5,5,5
      db 6,5,5,0,0,0,5,5,5,5,5,6,0,0,0,0,0
      db 0,6,5,0,0,0,5,5,6,6,6,6,6,6,0,0,0
      db 0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0
      db 0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

; Nave inimiga tipo C (cor 4)
nave3 db 0,0,0,0,0,0,0,12,12,12,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,12,12,12,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,12,12,12,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,12,12,12,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,12,12,12,0,0,0,0,0,0,0
      db 0,0,0,0,7,7,7,0,0,0,7,7,7,0,0,0,0
      db 0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0
      db 0,0,0,0,7,7,7,0,0,0,7,7,7,0,0,0,0
      db 0,0,0,0,7,7,7,0,0,0,7,7,7,0,0,0,0
      db 0,0,0,0,7,7,7,0,0,0,7,7,7,0,0,0,0
      db 0,0,0,0,7,7,7,0,0,0,7,7,7,0,0,0,0
      db 0,0,0,0,7,7,7,0,0,0,7,7,7,0,0,0,0

; Nave inimiga tipo D (cor 5)
nave4 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
      db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

.code 

desenha_fantasma proc
  ; Desenha sprite 16x12 a partir de ES:BX para ES:DI
  mov AX, 0A000H
  mov ES, AX
  mov DX, 13      ; altura = 13 linhas

laco_fantasma:
  mov CX, 17     ; largura = 17 pixels
LACO_LINHA:
    mov AL, [BX]
    stosb
    inc BX
    loop LACO_LINHA

    add DI, 303    ; 320 - 17 = 303 -> pular para pr?xima linha na tela
    dec DX
    jnz laco_fantasma

  ret
endp 

main:  

    mov ax, @data 
    mov ds, ax  
    mov Es, ax  

    ; set video mode 13h (320x200x256)
    mov AL, 13H
    mov AH, 0
    int 10H

; escreve cabe?alho
    mov bp,OFFSET msg   ; ES:BP aponta para a mensagem
    mov ah,13h      ; fun??o 13 - escrever string
    mov al,0h      ; atributo em bl (n?o usado no modo 13h)
    xor bh,bh       ; p?gina de v?deo 0
    mov bl,2        ; cor (apenas usado por BIOS text em modo texto; mantido)
    mov cx,TAM_MSG       ; comprimento da string
    mov dh,0        ; linha para colocar a string
    mov dl,0        ; coluna para colocar a string
    int 10h         ; chamada de servi?o bios

    mov bp,OFFSET nomes   ; ES:BP aponta para a mensagem
    mov ah,13h      ; fun??o 13 - escrever string
    mov al,0h
    xor bh,bh
    mov bl,15
    mov cx,TAM_MSG2
    mov dh,10
    mov dl,0
    int 10h

; desenha as naves iniciais (telas de demo/menu)
    mov DI, 19270
    mov BX, offset nave_ca?ador
    call desenha_fantasma

    mov DI, 19310 
    mov BX, offset nave1
    call desenha_fantasma

    mov DI, 19350
    mov BX, offset nave2
    call desenha_fantasma

    mov DI, 19390
    mov BX, offset nave3
    call desenha_fantasma

    mov DI, 19430
    mov BX, offset nave4
    call desenha_fantasma

    WAITKEY:
    mov ah, 01h   ; verifica se tecla foi pressionada
    int 16h
    jz WAITKEY    ; se não, espera
    mov ah, 00h   ; lê a tecla (sem mostrar)
    int 16h

    ; pequena c?pia (mantive sua rotina original)
    mov AX, 0A000H
    mov ES, AX
    mov DS, AX
    mov DI, 19279
    mov SI, 19280

    mov CX,3200
    cld
    rep movsb

    MOV  CX, 0FH
    MOV  DX, 4240H
    MOV  AH, 86H
    INT  15H  

LACO_: 
    mov AH, 01       ; verifica se há tecla pressionada
    int 16h
    jz LACO_         ; se não há tecla, continua no loop

    mov AH, 00       ; lê a tecla (não mostra na tela)
    int 16h

    cmp AL, 0
    je TECLAESPECIAL ; trata teclas especiais

    cmp AL, CR
    je PRESSENTER    ; trata ENTER

    jmp LACO_        ; volta para o loop

PRESSENTER:  
    mov AL, 13H
    mov AH, 0
    int 10H

    mov ax, @data 
    mov ds, ax  
    mov Es, ax   

; escreve campos SCORE / TEMPO
    mov bp,OFFSET campo1
    mov ah,13h
    mov al,0h
    xor bh,bh
    mov bl,15
    mov cx,TAM_MSG3
    mov dh,0
    mov dl,0
    int 10h

    mov bp,OFFSET campo2
    mov ah,13h
    mov al,0h
    xor bh,bh
    mov bl,15
    mov cx,TAM_MSG4
    mov dh,0
    mov dl,72
    int 10h

    mov bp,OFFSET campo3
    mov ah,13h
    mov al,0h
    xor bh,bh
    mov bl,2
    mov cx,TAM_MSG5
    mov dh,0
    mov dl,6
    int 10h

    mov bp,OFFSET campo4
    mov ah,13h
    mov al,0h
    xor bh,bh
    mov bl,2
    mov cx,TAM_MSG6
    mov dh,0
    mov dl,78
    int 10h

    jmp JOGO

TECLAESPECIAL:
    cmp AH, 48H ; Tecla para cima
    je MOVECIMA

    cmp AH, 50H
    je MOVEBAIXO

    jmp LACO_

MOVECIMA:        
    xor BH, BH
    mov DH, 12
    mov DL, 14
    mov AH, 2
    int 10H

    mov DL, ' '    
    mov AH, 02
    int 21h        

    xor BH, BH
    mov DH, 12
    mov DL, 22
    mov AH, 2
    int 10H

    mov DL, ' '    
    mov AH, 02
    int 21h     

    xor BH, BH
    mov DH, 11
    mov DL, 14
    mov AH, 2
    int 10H

    mov DL, '['    
    mov AH, 02
    int 21h        

    xor BH, BH
    mov DH, 11
    mov DL, 22
    mov AH, 2
    int 10H

    mov DL, ']'    
    mov AH, 02
    int 21h  

    jmp LACO_ 

MOVEBAIXO:
    xor BH, BH
    mov DH, 11
    mov DL, 14
    mov AH, 2
    int 10H

    mov DL, ' '    
    mov AH, 02
    int 21h                 

    xor BH, BH
    mov DH, 11
    mov DL, 22
    mov AH, 2
    int 10H

    mov DL, ' '    
    mov AH, 02
    int 21h  

    xor BH, BH
    mov DH, 12
    mov DL, 14
    mov AH, 2
    int 10H

    mov DL, '['    
    mov AH, 02
    int 21h        

    xor BH, BH
    mov DH, 12
    mov DL, 22
    mov AH, 2
    int 10H

    mov DL, ']'    
    mov AH, 02
    int 21h         

    jmp LACO_ 

    mov ax, @data 
    mov ds, ax  

JOGO:
    ; desenha naves no jogo (exemplos de posi??es)
    mov DI, 60635
    mov BX, offset nave_ca?ador
    call desenha_fantasma

    mov DI, 20801 
    mov BX, offset nave1
    call desenha_fantasma

    mov DI, 20955 
    mov BX, offset nave2
    call desenha_fantasma

    mov DI, 21109 
    mov BX, offset nave3
    call desenha_fantasma

    mov DI, 14721
    mov BX, offset nave4
    call desenha_fantasma

    mov ah, 1
    int 21h 

    mov ah, 4ch
    int 21h

end main
